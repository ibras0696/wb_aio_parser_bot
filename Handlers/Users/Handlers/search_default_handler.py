from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from wb_aio_parser_bot.Handlers.Users.SendTextMessage.message_text import info_search_default_message, welcome_message

# –ò–º–ø–æ—Ä—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π
from wb_aio_parser_bot.States.user_states import SearchStates

# –ò–º–ø–æ—Ä—Ç –ö–ª–∞–≤–∏–∞—Ç—É—Ä
from wb_aio_parser_bot.Keyboards.Users.user_keyboards import back_start_keyboard, start_user_button

from wb_aio_parser_bot.Keyboards.Users.default_search_keyboard import default_sorting_button, default_total_button

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–º–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö
from wb_aio_parser_bot.FileFunction.ParsingFunction import parsing_function_wb

router = Router()


@router.callback_query(F.data == 'default') # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –û–±—ã—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
async def default_search_cmd(call_back: CallbackQuery, state: FSMContext):
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–∂–Ω–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.clear()
    # –†–∞–±–æ—Ç–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
    await state.set_state(SearchStates.search)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ —Å–º–µ–Ω—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await call_back.message.edit_text(text=info_search_default_message, reply_markup=back_start_keyboard)


@router.message(SearchStates.search)
async def search_state_cmd(message: Message, state: FSMContext):
    if message.text is not None and len(message.text) != 0:

        await state.update_data(search=message.text)
        await state.set_state(SearchStates.sorting)

        await message.answer('–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:', reply_markup=default_sorting_button)
    else:
        # –†–∞–±–æ—Ç–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
        await state.set_state(SearchStates.search)

        await message.answer('–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç! ')


@router.callback_query(F.data.startswith('def_search_'))
async def sorting_state_cmd(call_back: CallbackQuery, state: FSMContext):
    call_data = call_back.data.replace('def_search_', '')

    await state.update_data(sorting=call_data)
    await state.set_state(SearchStates.limited)

    await call_back.message.edit_text('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¢–æ–≤–∞—Ä–æ–≤ üõçÔ∏è', reply_markup=default_total_button)


@router.callback_query(F.data.startswith('def_sorting_'))
async def result_search_cmd(call_back: CallbackQuery, state: FSMContext):
    call_data = call_back.data.replace('def_sorting_', '')
    await call_back.message.delete()

    await state.update_data(limited=call_data)

    data = await state.get_data()
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∞
    search = data.get('search')
    sorting = int(data.get('sorting'))
    limited = int(data.get('limited'))
    try:
        # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ü–∞—Ä—Å–∏–Ω–≥
        result = await parsing_function_wb(
            search=search,
            sorting=sorting,
            limit=limited
        )
        for i in range(len(result.get('–ë—Ä–µ–Ω–¥'))):
            product_txt = f"""
        - üè∑Ô∏è –ë—Ä–µ–Ω–¥ ‚Äî {result.get('–ë—Ä–µ–Ω–¥')[i]}
        - üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ ‚Äî {result.get('–ù–∞–∑–≤–∞–Ω–∏–µ')[i]}
        - üí∞ –¶–µ–Ω–∞ ‚Äî {result.get('–¶–µ–Ω–∞ –ø–æ—Å–ª–µ —Å–∫–∏–¥–∫–∏')[i]}
        - ‚≠ê –†–µ–π—Ç–∏–Ω–≥ ‚Äî {result.get('–†–µ–π—Ç–∏–Ω–≥')[i]}
        - üìù –û—Ü–µ–Ω–∫–∏ ‚Äî {result.get('–û—Ü–µ–Ω–∫–∏')[i]}
        - üî¢ –ê—Ä—Ç–∏–∫—É–ª ‚Äî {result.get('–ê—Ä—Ç–∏–∫—É–ª')[i]}
        - üîó –°—Å—ã–ª–∫–∞ ‚Äî {result.get('–°—Å—ã–ª–∫–∞')[i]}
        """
            await call_back.message.answer(f'{product_txt}')
    except Exception as ex:
        await call_back.message.answer(f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞! {ex}')
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–∂–Ω–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.clear()
        await call_back.message.answer(text=welcome_message, reply_markup=start_user_button)


